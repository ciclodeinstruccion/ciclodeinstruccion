/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

/**
 *
 * @author Rubén
 */
public class MasInformacion extends javax.swing.JDialog {

    /**
     * Creates new form MasInformacion
     */
    private Inicio i;
    public MasInformacion(java.awt.Frame parent, boolean modal, Inicio i) {
        super(parent, modal);
        this.setUndecorated(true);
        initComponents();  
        this.setLocationRelativeTo(null);
        this.i=i;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0,0));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 0, 0,200));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 51, 51));
        jTextArea1.setRows(3);
        jTextArea1.setText("Cilco de Instrución es un juego de lucha entre personajes de diferentes tipos. Todos tendrán en común:\n    -Vida: Puntos de vida de cada personaje. El personaje irá perdiendo puntos de vida conforme reciba daño. Los puntos\n     de vida del personaje durante el juego solo pueden recuperarse mediante habilidades. Cuando se quede sin puntos \n     de vida perderá.\n    -Daño: Puntos de daño de cada personaje. El personaje quitará tanta vida al enemigo como puntos de daño tiene.\n\nAdemás, cada tipo de personaje se diferencia del resto por un atributo especial. De este modo los 3 tipos de personajes \nexistentes son los siguientes:\n    -Tanque: Este tipo de personaje tendrá armadura. La armadura es una propiedad que reduce el daño recibido. \n    Reducirá el daño recibido la misma cantidad que puntos de armadura tenga. Por ejemplo, un personaje con 10 \n    armadura recibirá 10 de daño menos cuando sea atacado.\n    -Asesino: Este tipo de personaje tendrá esquivar. Esta propiedad nos indica la probabilidad que tiene un personaje \n    de no recibir daño cuando sea atacado. Cada punto en esta propiedad será un 1% de probabilidad de no recibir daño\n    cuando sea atacado. Por ejemplo, un personaje un 10% de esquivar tendrá un 10% de probabilidad de no recibir \n    daño cuando sea atacado.\n    -Fighter: Este tipo de personaje tendrá crítico. Esta propiedad nos indica la probabilidad que tiene el personaje de \n    realizar el doble de daño cuando ataque. Cada punto en esta propiedad será un 1% de probabilidad de realizar el \n    doble de daño. Por ejemplo, un personaje con un 5% de probabilidad de crítico tendrá un 5% de probabilidad de\n    hacer el doble de daño cuando ataque.\n\nCada personaje tendrá una serie de habilidades que se ejecutarán de manera aleatoria durante los combates y que harán \ndaño a su oponente disminuyendo su vida. Estas habilidades propias de cada personaje tendrán una probabilidad de \nusarse siendo las habilidades más fuertes aquellas con menor probabilidad de ser usadas. Por tanto, si un personaje que \ntiene 20 de daño utiliza una habilidad que hace 10 de daño, ese turno hará 30 daño al rival. Estas habilidades podrán ser\nde tres tipos:\n    -De daño: Habilidades que infringen daño a su adversario.\n    -De cura: Habilidad que incrementa la vida del personaje que las usa.\n    -Mixtas: Habilidades que curan y hacen daño en el mismo turno.\n\nLas partidas se jugarán entre dos personajes de dos jugadores distintos que se enfrentarán 1 contra 1 atacando de forma\nalternativa hasta que uno se quede sin vida. Estas partidas Tendrán un coste de inscripción de 100 de oro por cada \njugador, y únicamente se podrán jugar 10 partidas al día. La recompensa por ganar una partida será la siguiente:\n    -200 de oro más 100 puntos de experiencia para el usuario y el personaje utilizado en las primeras 5 partidas del día.\n    -150 de oro más 100 puntos de experiencia para el usuario y el personaje utilizado en las primeras 5 partidas del día.\n\nEsta experiencia recibida servirá para que tanto usuarios como personajes suban de nivel. La experiencia necesaria para \nsubir de nivel será la siguiente:\n\t\t\tExperiencia necesaria=Nivel actual*1000\n\nCuando un personaje o un usuario suba de nivel recibirá un punto de nivel que podrá utilizar para aumentar sus atributos. De esta forma se podrán aumentar los atributos de un personaje gastando sus puntos de nivel de la siguiente forma:\n    -Vida: Cada punto gastado en aumentar la vida aumentará en 10 la vida del personaje.\n    -Daño: Cada punto gastado en aumentar el daño aumentará en 5 el daño del personaje.\n    -Especial: Cada punto gastado en aumentar la propiedad característica de cada personaje (armadura, crítico, especial) \n    aumentará en 1 punto dicha propiedad.\n\nLos usuarios también poseerán una serie de atributos que podrán mejorar con sus puntos de nivel y que afectarán a sus \npersonajes durante la batalla:\n    -Vitalidad: Cada punto de vitalidad que tenga el usuario aumentará en 10 la vida de los personajes al inicio de la \n    partida.\n    -Fuerza: Cada punto de fuerza que tenga el usuario aumentará en 5 el daño de los personajes al inicio de la partida.\n    -Especial: Cada punto de el atributo especial aumentará en 1 punto el atributo propio de cada personaje (armadura, \n    esquivar, crítico) durante la partida.\n    -Inteligencia: Cada punto de el atributo inteligencia aumentará en 1 la probabilidad de usar la habilidad más fuerte del \n    personaje durante la partida.\n\nSe podrán gastar un máximo de 10 puntos de nivel en cada atributo tanto para los usuarios como para los personajes.\n");
        jTextArea1.setCaretPosition(0);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(170, 80, 990, 500);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportBorder(null);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/volver.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(540, 620, 260, 65);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo_normal.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1280, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        this.setVisible(false);
        i.setVisible(true);
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Pressed/volver.png")));
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/volver.png")));
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Hover/volver.png")));
    }//GEN-LAST:event_jButton1MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasInformacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasInformacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasInformacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasInformacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MasInformacion dialog = new MasInformacion(new javax.swing.JFrame(), true,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
