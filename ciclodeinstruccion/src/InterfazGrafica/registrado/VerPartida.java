/**
 * Interfaz gráfica que muestra el desarrollo de la partida
 */
package InterfazGrafica.registrado;

import InterfazGrafica.Inicio;
import ciclodeinstruccion.Partida;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.Timer;

public class VerPartida extends javax.swing.JDialog {

    /**
     * Creates new form VerPartida
     */
    private Partida partida;
    private int cont;
    private boolean jugar;//es true cuando se accede a esta interfaz desde la interfaz grafica unirse a una partida
    private InicioRegistrado ir;
    private boolean prueba;//es true cuando se accede desde el menu inicial
    private Inicio i;
    private boolean repeticion;//es true cuando se accede desde el historial de partidas
    private Estadisticas e;
    /*Los siguiente atributos seran true cuando el personaje hace critico o esquiva
    y se usan para cambiar la imagen del personaje en el siguiente turno después de esquivar
    o de hacer critico
    */
    private boolean esquivarj1=false;
    private boolean esquivarj2=false;
    private boolean criticoj1=false;
    private boolean criticoj2=false;
    
    
    public VerPartida(java.awt.Frame parent, boolean modal,Partida p,boolean jugar ,InicioRegistrado ir,boolean prueba, Inicio i, boolean repeticion, Estadisticas e) {
        super(parent, modal);
        this.setUndecorated(true);
        initComponents();  
        this.setLocationRelativeTo(null);
        this.partida=p;
        this.cont=1;
        this.jugar=jugar;
        this.ir=ir;
        this.prueba=prueba;
        this.i=i;
        this.repeticion=repeticion;
        this.e=e;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        texto = new javax.swing.JTextArea();
        siguiente = new javax.swing.JButton();
        imagenP1 = new javax.swing.JLabel();
        imagenP2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jugador1 = new javax.swing.JLabel();
        jugador2 = new javax.swing.JLabel();
        vida1 = new javax.swing.JLabel();
        vida2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0,0));

        texto.setEditable(false);
        texto.setBackground(new java.awt.Color(0, 0, 0,200));
        texto.setColumns(20);
        texto.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        texto.setForeground(new java.awt.Color(255, 51, 0));
        texto.setRows(5);
        jScrollPane1.setViewportView(texto);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(340, 115, 600, 290);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportBorder(null);

        siguiente.setVisible(false);
        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/siguiente.png"))); // NOI18N
        siguiente.setBorder(null);
        siguiente.setBorderPainted(false);
        siguiente.setContentAreaFilled(false);
        siguiente.setFocusPainted(false);
        siguiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                siguienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                siguienteMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                siguienteMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                siguiente(evt);
            }
        });
        getContentPane().add(siguiente);
        siguiente.setBounds(350, 480, 260, 65);

        imagenP1.setMaximumSize(new java.awt.Dimension(300, 450));
        imagenP1.setMinimumSize(new java.awt.Dimension(300, 450));
        imagenP1.setPreferredSize(new java.awt.Dimension(300, 450));
        getContentPane().add(imagenP1);
        imagenP1.setBounds(30, 110, 300, 450);

        imagenP2.setMaximumSize(new java.awt.Dimension(300, 450));
        imagenP2.setMinimumSize(new java.awt.Dimension(300, 450));
        imagenP2.setPreferredSize(new java.awt.Dimension(300, 450));
        getContentPane().add(imagenP2);
        imagenP2.setBounds(950, 110, 300, 450);

        jButton1.setVisible(false);
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/volver.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(680, 480, 260, 65);

        jugador1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jugador1.setForeground(new java.awt.Color(255, 102, 51));
        jugador1.setText("JUGADOR1");
        getContentPane().add(jugador1);
        jugador1.setBounds(30, 60, 270, 60);

        jugador2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jugador2.setForeground(new java.awt.Color(255, 102, 51));
        jugador2.setText("JUGADOR2");
        getContentPane().add(jugador2);
        jugador2.setBounds(950, 60, 270, 60);

        vida1.setMaximumSize(new java.awt.Dimension(256, 32));
        vida1.setMinimumSize(new java.awt.Dimension(256, 32));
        vida1.setPreferredSize(new java.awt.Dimension(256, 32));
        getContentPane().add(vida1);
        vida1.setBounds(50, 580, 256, 32);

        vida2.setMaximumSize(new java.awt.Dimension(256, 32));
        vida2.setMinimumSize(new java.awt.Dimension(256, 32));
        vida2.setPreferredSize(new java.awt.Dimension(256, 32));
        getContentPane().add(vida2);
        vida2.setBounds(970, 580, 256, 32);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo_normal.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1280, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Cada vez que se pulsa el boton siguiente se avanza en la partida y la imagen mostrada 
 * irá cambiando en función de lo que pase
 * @param evt 
 */
    private void siguiente(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_siguiente
        if(siguiente.isEnabled()){
            if(cont<partida.getTexto().size()){
                texto.setText(texto.getText()+"\n"+partida.getTexto().get(cont));//Actualiza texto
                this.vida1();//Actualiza barra de vida del personaje 1
                this.vida2();//Actualiza barra de vida del personaje 2
                vida1.setToolTipText(Float.toString(partida.getVidaJ1().get(cont)));
                vida2.setToolTipText(Float.toString(partida.getVidaJ2().get(cont)));
                if(partida.getCriticoj1().get(cont)){
                    /*Si el personaje 1 hace critico se cambia la imagen del personaje
                    y suena un sonido característico del mismo*/
                    Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Critico/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                    imagenP1.setIcon(new ImageIcon(img1));
                    playSound("src/Audios/Critico/"+partida.getPersonaje1().getNombre()+".wav");
                    this.criticoj1=true;
                }else {
                    if(this.criticoj1){
                        /*El turno siguiente a producirse el critico se retoma la 
                        imagen inicial del personaje
                        */
                        Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                        imagenP1.setIcon(new ImageIcon(img1));
                        this.criticoj1=false;
                    }       
                }
                //Ocurre lo mismo cuando el personaje 2 hace critico
                if(partida.getCriticoj2().get(cont)){
                    Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Critico/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                    imagenP2.setIcon(new ImageIcon(img2));
                    playSound("src/Audios/Critico/"+partida.getPersonaje2().getNombre()+".wav");
                    this.criticoj2=true;
                }else {
                    if(this.criticoj2){
                        Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                        imagenP2.setIcon(new ImageIcon(img2));
                        this.criticoj2=false;
                    }   
                }
                //Ocurre lo mismo cuando el personaje esquiva
                if(partida.getEsquivarj1().get(cont)){
                    Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Esquivar/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                    imagenP1.setIcon(new ImageIcon(img1));
                    playSound("src/Audios/Esquivar/"+partida.getPersonaje1().getNombre()+".wav");
                    esquivarj1=true;
                }else {
                    if(this.esquivarj1){
                        Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                        imagenP1.setIcon(new ImageIcon(img1));
                        esquivarj1=false;
                    }   
                }
                if(partida.getEsquivarj2().get(cont)){
                    Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Esquivar/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                    imagenP2.setIcon(new ImageIcon(img2));
                    playSound("src/Audios/Esquivar/"+partida.getPersonaje2().getNombre()+".wav");
                    esquivarj2=true;
                }else{
                    if(esquivarj2){
                        Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                        imagenP2.setIcon(new ImageIcon(img2));
                        esquivarj2=false;
                    }    
                }
                cont++;
            }
            /*Cuando la partida acaba se cambian las imagenes de los personajes según
            cual sea el ganador y el perdedor
            */
            if(cont>=partida.getTexto().size()){
                siguiente.setEnabled(false);
                if(partida.getJugador1().getNombre().equals(partida.getGanador().getNombre())){
                    Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Ganador/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                    imagenP1.setIcon(new ImageIcon(img1));
                    Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Perdedor/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                    imagenP2.setIcon(new ImageIcon(img2));
                }
                else{
                    Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Perdedor/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
                    imagenP1.setIcon(new ImageIcon(img1));
                    Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Ganador/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
                    imagenP2.setIcon(new ImageIcon(img2));
                }
            }
        }
        
        
    }//GEN-LAST:event_siguiente

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        //Según el panel desde el que hemos accedido se volverá a un panel o a otro
        this.setVisible(false);
        if(jugar){
            ir.mostrar();
            ir.setVisible(true);
        }
        else if(prueba){
            i.setVisible(true);
        }
        else if(repeticion){
            e.mostrar2();
            e.mostrar3();
            e.mostrar4();
            e.setVisible(true);
        }
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Pressed/volver.png")));
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/volver.png")));
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Hover/volver.png")));
    }//GEN-LAST:event_jButton1MouseEntered

    private void siguienteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_siguienteMousePressed
        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Pressed/siguiente.png")));
    }//GEN-LAST:event_siguienteMousePressed

    private void siguienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_siguienteMouseExited
        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Normal/siguiente.png")));
    }//GEN-LAST:event_siguienteMouseExited

    private void siguienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_siguienteMouseEntered
        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Botones/Hover/siguiente.png")));
    }//GEN-LAST:event_siguienteMouseEntered
    /**
     * Método que establece la pantalla inicial.Establece las imagenes de los personajes,
     * las barras de vida y reproduce el sonido del primer personajes.
     */
    public void mostrar(){
        jugador1.setText(partida.getJugador1().getNombre());
        jugador2.setText(partida.getJugador2().getNombre());
        Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje1().getNombre()+".jpg")).getImage();
        imagenP1.setIcon(new ImageIcon(img1));
        Image img2=new ImageIcon(this.getClass().getResource("/Imagenes/Personajes/"+this.partida.getPersonaje2().getNombre()+".jpg")).getImage();
        imagenP2.setIcon(new ImageIcon(img2));
        texto.setText(partida.getTexto().get(0));
        this.vida1();
        this.vida2();
        vida1.setToolTipText(Float.toString(partida.getVidaJ1().get(cont)));
        vida2.setToolTipText(Float.toString(partida.getVidaJ2().get(cont)));
        
        playSound("src/Audios/Personajes/"+partida.getPersonaje1().getNombre()+".wav");
        Timer timer = new Timer(0, taskPerformer2);
        timer.setInitialDelay((int)(duracion("src/Audios/Personajes/"+partida.getPersonaje1().getNombre()+".wav")*0.0010)+100);
        timer.setRepeats(false);
        timer.start();
    }

    /**
     * Método que cambia la imagen de la barra de vida del personaje 1
     */
    public void vida1(){
        if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/100.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.9&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/100.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.8&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.9){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/90.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.7&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.8){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/80.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.6&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.7){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/70.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.5&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.6){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/60.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.4&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.5){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/50.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.3&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.4){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/40.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.2&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.3){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/30.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>=0.1&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.2){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/20.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()>0&&partida.getVidaJ1().get(cont)/partida.getVidamax1()<0.1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/10.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ1().get(cont)/partida.getVidamax1()<=0){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida1/0.png")).getImage();
            vida1.setIcon(new ImageIcon(img1));
        }
    }
    
    /**
     * Método que cambia la imagen de la barra de vida del personaje 2
     */
    public void vida2(){
        if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/100.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.9&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/100.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.8&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.9){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/90.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.7&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.8){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/80.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.6&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.7){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/70.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.5&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.6){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/60.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.4&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.5){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/50.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.3&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.4){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/40.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.2&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.3){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/30.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>=0.1&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.2){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/20.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()>0&&partida.getVidaJ2().get(cont)/partida.getVidamax2()<0.1){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/10.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
        else if(partida.getVidaJ2().get(cont)/partida.getVidamax2()<=0){
            Image img1=new ImageIcon(this.getClass().getResource("/Imagenes/Vida2/0.png")).getImage();
            vida2.setIcon(new ImageIcon(img1));
        }
    }
    /**
     * Método que reproduce sonido
     * @param soundName direccion del arhivo a reproducir 
     */
    public void playSound(String soundName){
        try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile( ));
            Clip clip = AudioSystem.getClip( );
            clip.open(audioInputStream);
            clip.start( );
            clip.drain();
        }
        catch(Exception ex){
            System.out.println("Error with playing sound.");
            ex.printStackTrace( );
        }
    }
    /**
     * Método que calcula la duracción del audio a reproducir
     * @param soundName direccion del archivo que se va a reproducir
     * @return la duración del sonido a reproducir
     */
    public static long duracion(String soundName){
         try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile( ));
            Clip clip = AudioSystem.getClip( );
            clip.open(audioInputStream);
            return clip.getMicrosecondLength();
        }
        catch(Exception ex){
            System.out.println("Error with playing sound.");
            ex.printStackTrace( );
        }
         return 0;
    }
    /**
     * Pone visibles el boton siguiente y volver
     */
    ActionListener taskPerformer = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
           siguiente.setVisible(true);
           jButton1.setVisible(true);
        }
    };
    
    /**
     * Reproduce el audio del segundo personaje y pone la segunda línea del texto
     */
    ActionListener taskPerformer3 = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            playSound("src/Audios/Personajes/"+partida.getPersonaje2().getNombre()+".wav");
            texto.setText(texto.getText()+"\n"+partida.getTexto().get(cont));
            cont++;
            Timer timer = new Timer(0, taskPerformer4);
            timer.setInitialDelay((int)(duracion("src/Audios/Personajes/"+partida.getPersonaje2().getNombre()+".wav")*0.0010)+100);
            timer.setRepeats(false);
            timer.start();
        }
    };
    
    /**
     * Reproduce audio contra
     */
    ActionListener taskPerformer2 = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            playSound("src/Audios/contra.wav");
            Timer timer = new Timer(0, taskPerformer3);
            timer.setInitialDelay((int)(duracion("src/Audios/contra.wav")*0.0010)+100);
            timer.setRepeats(false);
            timer.start();
        }
    };
    
    /**
     * Reproduce último audio y pone la tercera línea de texto
     */
    ActionListener taskPerformer4 = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            playSound("src/Audios/batalla.wav");
            texto.setText(texto.getText()+"\n"+partida.getTexto().get(cont));
            cont++;
            Timer timer = new Timer(0, taskPerformer);
            timer.setInitialDelay((int)(duracion("src/Audios/batalla.wav")*0.0010)+100);
            timer.setRepeats(false);
            timer.start();
        }
    };
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VerPartida dialog = new VerPartida(new javax.swing.JFrame(), true,null,true,null,true,null,true,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imagenP1;
    private javax.swing.JLabel imagenP2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jugador1;
    private javax.swing.JLabel jugador2;
    private javax.swing.JButton siguiente;
    private javax.swing.JTextArea texto;
    private javax.swing.JLabel vida1;
    private javax.swing.JLabel vida2;
    // End of variables declaration//GEN-END:variables
}
